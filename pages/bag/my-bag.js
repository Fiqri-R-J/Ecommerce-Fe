/* eslint-disable react/jsx-key */
/* eslint-disable react-hooks/rules-of-hooks */
/* eslint-disable @next/next/no-img-element */
import React from "react";
import Head from "next/head";
import style from "@/styles/pages/myBagStyle.module.scss";
import Link from "next/link";
import Navbar from "@/components/organisms/navbar";
import CardSelectProduct from "@/components/molecules/cardSelectProduct";
import axios from "axios";
import { useRouter } from "next/router";
import { getCookies, getCookie, setCookie, deleteCookie } from "cookies-next";

export default function bag(props) {
  const [getCheckout, setGetCheckout] = React.useState([]);
  const [updatedCheckoutItems, setUpdatedCheckoutItems] = React.useState([]);

  React.useEffect(() => {
    const fetchCheckoutHistory = async () => {
      try {
        const response = await axios.get(
          `${process.env.NEXT_PUBLIC_BACKEND_URL}/checkout/detail/history`,
          {
            headers: {
              Authorization: `Bearer ${props.token}`,
            },
          }
        );

        setGetCheckout(response.data.data);
      } catch (error) {
        console.log(error);
      }
    };

    fetchCheckoutHistory();
  }, []);

  console.log("getCheckout---", getCheckout);

  const [quantities, setQuantities] = React.useState(() => {
    const quantitiesObj = {};
    for (const item of getCheckout) {
      quantitiesObj[item.products_id] = item.qty;
    }
    return quantitiesObj;
  });

  const handleOnIncrease = (productId) => {
    setQuantities((prevState) => {
      const currentQty = prevState[productId] || 0;
      const updatedQty = currentQty + 1;
      const maxQty = getCheckout.find((item) => item.products_id === productId)
        .products[0].qty;
      return {
        ...prevState,
        [productId]: updatedQty <= maxQty ? updatedQty : maxQty,
      };
    });
  };

  const handleOnDecrease = (productId) => {
    setQuantities((prevState) => ({
      ...prevState,
      [productId]: Math.max((prevState[productId] || 0) - 1, 0),
    }));
  };

  React.useEffect(() => {
    setUpdatedCheckoutItems(
      getCheckout.map((item) => {
        const productId = item.products[0]?.id;
        const updatedQty = quantities[item.products_id] || item.qty;
        const totalPrice = item.products[0]?.price * updatedQty;

        console.log(
          "quantities[item.products_id]",
          quantities[item.products_id]
        );
        return {
          ...item,
          newQty: updatedQty,
          newTotalPrice: totalPrice,
        };
      })
    );
  }, [getCheckout, quantities]);

  console.log("getCheckout", getCheckout);
  console.log("updatedCheckoutItems", updatedCheckoutItems);

  const [selectedAll, setSelectedAll] = React.useState(false);
  const [selectedCheckouts, setSelectedCheckouts] = React.useState([]);

  const handleSelectAll = () => {
    setSelectedAll(!selectedAll);
    setSelectedCheckouts(getCheckout.map((item) => item.checkout_id));
  };

  const handleSelectCheckout = (id) => {
    if (selectedCheckouts.includes(id)) {
      setSelectedCheckouts(selectedCheckouts.filter((item) => item !== id));
    } else {
      setSelectedCheckouts([...selectedCheckouts, id]);
    }
  };

  const [masterChecked, setMasterChecked] = React.useState(false);
  const [childChecked, setChildChecked] = React.useState(false);

  const handleMasterChange = (e) => {
    setMasterChecked(e.target.checked);
    setChildChecked(e.target.checked);
  };

  const handleChildChange = (e, id) => {
    const isChecked = e.target.checked;
      ((prevState) => {
      if (isChecked) {
        return [...prevState, id];
      } else {
        return prevState.filter((item) => item !== id);
      }
    });
  };

  return (
    <>
      <Head>
        <title>My Bag | Blanja</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={style.main}>
        <div className="container-fluid p-0">
          {/* NAVBAR */}
          <nav
            className={`container-fluid sticky-sm-top shadow py-2 ${style.containerNavbar}`}>
            <Navbar />
          </nav>
          {/* END OF NAVBAR */}

          {/* MY BAG */}
          <section className={`container ${style.bag}`}>
            <div className={`${style.subTitle}`}>
              <h3>My bag</h3>
            </div>
            <div className={`row ${style.listProduct}`}>
              {/* SIDE LEFT */}
              <div className="col-8">
                {/* SELECT ALL PRODUCT */}
                <div
                  className={`shadow-sm pt-3 px-4 border mt-3 mb-4 ${style.cardSelectAll}`}
                  style={{ width: "100%" }}>
                  <div className={`row`}>
                    <div className="col-7">
                      <div class="form-check">
                        <input
                          className="form-check-input"
                          type="checkbox"
                          value=""
                          id="selectAll"
                          // checked={selectedAll}
                          // onClick={handleSelectAll}
                          checked={masterChecked}
                          onChange={handleMasterChange}
                        />
                        <label
                          className="form-check-label d-inline-block"
                          for="selectAll">
                          Select all items{" "}
                          <p className="d-inline-block">(2 items selected)</p>
                        </label>
                      </div>
                    </div>
                    <div className="col-5 text-end">
                      <button>Deleted</button>
                    </div>
                  </div>
                </div>
                {/* PRODUCT */}
                {getCheckout.map((item, key) => {
                  const capitalize = (str) => {
                    return str.replace(/(^\w|\s\w)/g, function (letter) {
                      return letter.toUpperCase();
                    });
                  };
                  const product = item.products[0];
                  const price =
                    product.price * (quantities[item.products_id] || item.qty);
                  const prices = price.toString();
                  const convertPrice = prices.replace(
                    /\d(?=(\d{3})+$)/g,
                    "$&."
                  );
                  return (
                    <React.Fragment key={key}>
                      <CardSelectProduct
                        img={`https://res.cloudinary.com/daouvimjz/image/upload/v1676281237/${item?.product_picture}`}
                        selectedProductName={capitalize(item?.product_name)}
                        brand={capitalize(item?.products[0]?.brand)}
                        // total={item?.qty}
                        total={quantities[item.products_id] || item.qty}
                        selectedColor={capitalize(item?.color)}
                        // price={item?.products[0]?.price * item?.qty}
                        price={convertPrice}
                        selectedSize={capitalize(item?.size)}
                        handleOnIncrease={() =>
                          handleOnIncrease(item.products_id)
                        }
                        handleOnDecrease={() =>
                          handleOnDecrease(item.products_id)
                        }
                        // selectedAll={selectedAll}
                        // handleSelectAll={handleSelectAll}
                        childChecked={childChecked}
                        handleChildChange={handleChildChange}
                      />
                    </React.Fragment>
                  );
                })}
              </div>
              {/* SIDE RIGHT */}
              <div className="col-4">
                <div
                  className={`shadow-sm py-4 px-4 border mt-3 mb-4 ${style.cardCost}`}
                  style={{ width: "365px", position: "fixed" }}>
                  <h5>Shopping summary</h5>
                  <div className="row mt-4 mb-2">
                    <div className="col-6">
                      <p>Total price</p>
                    </div>
                    <div className="col-6">
                      <h5 className="text-end">Rp.250000</h5>
                    </div>
                  </div>
                  <div className="row">
                    <div className="col-12">
                      <Link
                        href={"/checkout"}
                        type="button"
                        className={`btn btn-primary ${style.btnBuy}`}>
                        Buy
                      </Link>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </section>
          {/* END OF MY BAG */}
        </div>
      </main>
    </>
  );
}

export async function getServerSideProps(context) {
  const token = getCookie("token", context) || "";

  return {
    props: {
      token,
    },
  };
}
